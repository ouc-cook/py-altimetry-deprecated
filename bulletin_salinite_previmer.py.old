# -*- coding: utf-8 -*- 
# ________________________________________________________________
# 
# Bulletin PREVIMER
# => Calcul des climatologies en salinite
#
# G. Charria (11/2011)
# ________________________________________________________________
import os,sys,glob,gc,time
import cdtime, cdms2
from vacumm.misc.io import ncread_best_estimate
from vacumm.misc.atime import strptime, monthly
from vacumm.misc.plot import map, savefigs
from vacumm.misc.grid.regridding import grid2xy, xy2xy
from vacumm.misc.axes import create_time
from vacumm.misc.plot import curve2
import matplotlib.pyplot as P
import numpy as np
import MV2
import cdutil
import psutil

from vacumm.misc.plot import map2

# Pour produire du NetCDF3
cdms2.setNetcdfShuffleFlag(0); cdms2.setNetcdfDeflateFlag(0); cdms2.setNetcdfDeflateLevelFlag(0)

# ______________________________________________________________________________
# ---- Parametres

filename="PREVIMER_F1-MARS3D-MANGA4000_%Y%m%dT%H00Z_VFILTRE.nc" # Pour les donnees filtrees
#filename="PREVIMER_F1-MARS3D-MANGA_%Y%m%dT%H00Z.nc" # Pour les donnees non filtrees [beaucoup plus long a tourner]

# Pour test ....
#c1=cdtime.comptime(2010,12,1,0,0,0)  
#c2=cdtime.comptime(2011,1,30,23,59,59)

c1=cdtime.comptime(2011,7,1,0,0,0) # Date de debut de l'analyse pour les moyennes mensuelles
c2=cdtime.comptime(2011,9,30,23,59,59) # Date de fin de l'analyse pour les moyennes mensuelles
rep_previf1 = '/home/oo8/oo/modeles_previmer/f1_4000/best_estimate/'

# ---- Pour la climatologie
# Debut du run F1 - 01/2010
cdebclim = cdtime.comptime(2010)
# Temps actuel local
cfinclim = cdtime.comptime(time.localtime()[0],time.localtime()[1],time.localtime()[2],time.localtime()[3],time.localtime()[4],time.localtime()[5])

print 'ATTENTION !!!!! Une partie du nom de fichier est en dur a la fin du programme !!!!!!!!!!!!!! '

rep_ecriture = '/home/caparmor-work/gcharria/PREVI/Salinite'
fileout1 = 'PREVIMER_F1_4000-MARS3D-MANGA_SAL_AVG'
fileout2 = 'PREVIMER_F1_4000-MARS3D-MANGA_SAL_MONTHLY_CLIMATOLOGY.nc'
# ______________________________________________________________________________

def write_nc_cf(varin1,varin2,filename):
    f = cdms2.open(filename, 'w')
    #for var in varin:
    f.write(varin1) # ecriture d'une variable
    f.write(varin2) # ecriture d'une variable
    #f.history = 'Created with '+__file__.encode('utf8') # attribut global
    creation_date = time.strftime('%Y-%m-%dT%H:%M:%SZ')
    f.creation_date = creation_date
    f.title = 'MARS Salinity'
    f.close() # fermeture
    #-- Probleme a voir ... comment ne pas ecrire les bounds de maniere concise.    

# ______________________________________________________________________________
# ---- Lecture des champs de salinite de surface pour les moyennes mensuelles recentes.
print '==> Lecture des champs de salinite pour les moyennes mensuelles recentes.'

# Cas ou les obs sont sur plusieurs annees ... boucle necessaire sur les repertoires PREVIMER
if c1.year < c2.year:
    S=()
    for iyear in np.arange(c1.year,c2.year+1):
        dir_f1 = os.path.join(rep_previf1,str(iyear))
        print dir_f1
        intermS = ncread_best_estimate('SAL',os.path.join(dir_f1,filename), (c1, c2),select=dict(level=slice(29,30)))
        S+=intermS,
    S = MV2.concatenate(S)                         
else:
    dir_f1 = os.path.join(rep_previf1,str(c1.year))
    S = ncread_best_estimate('SAL',os.path.join(dir_f1,filename), (c1, c2),select=dict(level=slice(29,30)))

# ______________________________________________________________________________
# ---- Calcul des moyennes mensuelles
S=S(squeeze=1)
Smonthly = monthly(S)
Smonthly.long_name = "monthly average surface salinity"
Smonthly.standard_name = "sea_water_salinity"

del S
gc.collect()


#sys.exit(0)

# ______________________________________________________________________________
# ---- Lecture des champs de salinite de surface pour la climatologie
print '==> Lecture des champs de salinite pour la climatologie.'

if cdebclim.year < cfinclim.year:
    S=()
    for iyear in np.arange(cdebclim.year,cfinclim.year+1):
        dir_f1 = os.path.join(rep_previf1,str(iyear))
        print dir_f1
        intermS = ncread_best_estimate('SAL',os.path.join(dir_f1,filename), (cdebclim, cfinclim),select=dict(level=slice(29,30)))
        S+=intermS,
    S = MV2.concatenate(S)                         
else:
    dir_f1 = os.path.join(rep_previf1,str(cdebclim.year))
    S = ncread_best_estimate('SAL',os.path.join(dir_f1,filename), (cdebclim, cfinclim),select=dict(level=slice(29,30)))

print S.shape

# ______________________________________________________________________________
# ---- Calcul des moyennes mensuelles
cdutil.setTimeBoundsMonthly(S)
# The default action of the setTimeBoundsMonthly function assumes that the time point is at the beginning of the month.
# http://esg.llnl.gov/cdat/cdat_utilities/cdat_utilities-1.htm
Sseasonal = cdutil.ANNUALCYCLE.climatology(S)
Sseasonal = Sseasonal(squeeze=1)
Sseasonal.long_name = "climatological salinity"
Sseasonal.standard_name = "sea_water_salinity"
# ______________________________________________________________________________
# ---- Ecriture des champs de salinite de surface
print '==> Ecriture des champs de salinite pour la climatologie.'
f = cdms2.open(os.path.join(rep_ecriture,fileout2), 'w')
f.write(Sseasonal) # ecriture d'une variable
f.history = 'Created with '+__file__.encode('utf8') # attribut global
f.close() # fermeture

# ______________________________________________________________________________
# ---- Calcul des anomalies pour la periode consideree [c1,c2]
Sanom = Smonthly.clone()

for ii,imonth in enumerate(np.arange(c1.month,c2.month+1)):
    Sanom[ii,:,:]=Smonthly[ii,:,:]-Sseasonal[imonth-1,:,:]



Sanom.id = "ANOM_SAL"
Sanom.long_name = "monthly surface salinity anomaly"
Sanom.standard_name = "sea_water_salinity_anomaly"
Sanom.valid_min = -50.
# ______________________________________________________________________________
# ---- Ecriture des champs de salinite de surface
print '==> Ecriture des champs de salinite pour les moyennes mensuelles et les anomalies.'

write_nc_cf(Smonthly[0,:,:],Sanom[0,:,:],os.path.join(rep_ecriture,fileout1+str(c1.year)+'07.nc'))
write_nc_cf(Smonthly[1,:,:],Sanom[1,:,:],os.path.join(rep_ecriture,fileout1+str(c1.year)+'08.nc'))
write_nc_cf(Smonthly[2,:,:],Sanom[2,:,:],os.path.join(rep_ecriture,fileout1+str(c1.year)+'09.nc'))
    


print '---- Done! ----'
